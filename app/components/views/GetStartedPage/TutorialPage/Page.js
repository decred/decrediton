import { KeyBlueButton, InvisibleButton } from "buttons";
import "style/Tutorial.less";
import { FormattedMessage as T, injectIntl, defineMessages } from "react-intl";

const messages = defineMessages({
  step0Title: {
    id: "tutorial.step.0.title",
    defaultMessage: "What is the Decred Blockchain?",
  },
  step0TextBoldp1: {
    id: "tutorial.step.0.text.bold.p1",
    defaultMessage: "The blockchain is the heart of Decred, "
  },
  step0Textp1: {
    id: "tutorial.step.0.text.p1",
    defaultMessage: " where all activity that takes place is stored. It is like a global, decentralised spreadsheet or ledger that records all the activity that happens when Decred funds are transferred keeping track of how many tokens are sent, and what the balance of every account is.",
  },
  step0Textp2: {
    id: "tutorial.step.0.text.p2",
    defaultMessage: "The blockchain is used to confirm that new transactions are valid and that no fraud is taking place.",
  },
  step0Textp3: {
    id: "tutorial.step.0.text.p3",
    defaultMessage: "Decred uses an innovative hybrid proof-of-work (PoW) proof-of-stake (PoS) for validating the transactions, keeping the network secure and making decisions on the consensus rules.",
  },
  step0Textp4: {
    id: "tutorial.step.0.text.p4",
    defaultMessage: "In return for participation, miners (PoW) and stakers (PoS) are rewarded with newly generated Decred tokens.",
  },
  step1Title: {
    id: "tutorial.step.1.title",
    defaultMessage: "What is a Wallet?",
  },
  step1TextBoldp1: {
    id: "tutorial.step.1.text.bold.p1",
    defaultMessage: "Wallet is the tool for interacting with the blockchain and using the currency.",
  },
  step1Textp1: {
    id: "tutorial.step.1.text.p1",
    defaultMessage: "It can be used to send and receive Decred funds, and acts as a personal ledger of transactions.",
  },
  step1Textp2: {
    id: "tutorial.step.1.text.p2",
    defaultMessage: "Decrediton Wallet can also be used for participating in staking (PoS) and project governance by time-locking your funds in return for tickets.",
  },
  step2Title: {
    id: "tutorial.step.2.title",
    defaultMessage: "Key to Your Wallet",
  },
  step2Textp1: {
    id: "tutorial.step.2.text.p1",
    defaultMessage: "Wallets are determinstically generated by a wallet seed. The mneumonic",
  },
  step2TextBoldp1: {
    id: "tutorial.step.2.text.bold.p1",
    defaultMessage: "seed is a list of 33 words",
  },
  step2Textp12: {
    id: "tutorial.step.2.text.p12",
    defaultMessage: " that can be easily written down on a piece of paper for backup.",
  },
  step2Textp2: {
    id: "tutorial.step.2.text.p2",
    defaultMessage: "The seed works as a master key that stores all of the information needed to re-create the wallet at any time.",
  },
  step2Textp3: {
    id: "tutorial.step.2.text.p3",
    defaultMessage: "If the wallet encryption passphrase is forgotten or the wallet is destroyed (e.g. computer breaks), the seed can be used to recover the wallet. Same seed can also be used to export your wallet to other Decred wallet clients.",
  },
  step2Textp4: {
    id: "tutorial.step.2.text.p4",
    defaultMessage: "Failure to keep your seed key private can result in the theft of your entire wallet. Under no circumstanes should it ever be revealed to someone else.",
  },
  step3Title: {
    id: "tutorial.step.3.title",
    defaultMessage: "Staking and Governance",
  },
  step3Textp1: {
    id: "tutorial.step.3.text.p1",
    defaultMessage: "Participation in staking (PoS) requires only existing Decred funds."
  },
  step3TextLightp1: {
    id: "tutorial.step.3.text.light.p1",
    defaultMessage: "(Unlike Proof-of-Work (PoW) mining that requires computing resources and electricity)."
  },
  step3Textp2: {
    id: "tutorial.step.3.text.p2",
    defaultMessage: "Funds can be time-locked in return for tickets on the network. Tickets are chosen at random to vote on the validity of blocks. By average a ticket gets voted in 28 days"
  },
  step3TextLightp2: {
    id: "tutorial.step.3.text.light.p2",
    defaultMessage: "(possible maximum time period is 142 days)."
  },
  step3Textp22: {
    id: "tutorial.step.3.text.p22",
    defaultMessage: "A succesful vote returns the stakeholder a part of the Block Reward plus the original cost of the ticket. In case of missing the vote"
  },
  step3TextLightp22: {
    id: "tutorial.step.3.text.pLight22",
    defaultMessage: "(0.5% probability)"
  },
  step3Textp23: {
    id: "tutorial.step.3.text.p23",
    defaultMessage: ", the original cost of the ticket is safely returned to the user without the reward.",
  },
  step3Textp3: {
    id: "tutorial.step.3.text.p3",
    defaultMessage: "Changes are inevitable for all digital currencies, whether deciding on development matters or resolving unexpected problems. Decred’s innovative governance system is built into the blockchain. This allows for seamless adaption to changes while keeping the existing blockchain ecosystem safe. The same tickets are also used as voting power when deciding on consensus changes.",
  },
  step3Textp4: {
    id: "tutorial.step.3.text.p4",
    defaultMessage: "Staking encourages long term investment in Decred by giving the stakeholders decision-making power in projects governance as well rewarding them for participation."
  },
  step4Title: {
    id: "tutorial.step.4.title",
    defaultMessage: "Safety Tips",
  },
  step4TextBoldp1: {
    id: "tutorial.step.4.text.bold.p1",
    defaultMessage: "Only You are responsible for your security.",
  },
  step4Textp2: {
    id: "tutorial.step.4.text.p2",
    defaultMessage: "Always keep your seed key and password safe. If you lose your seed key or password, nobody else can recover it.",
  },
  step4Textp3: {
    id: "tutorial.step.4.text.p3",
    defaultMessage: "Make a backup of your seed key and password. Do not store it on your computer, instead write it down or print it out on a piece of paper or save it to a USB drive.",
  },
  step4Textp4: {
    id: "tutorial.step.4.text.p4",
    defaultMessage: "Do not store your seed key in a cloud storage or a password service. If your account gets compromised, so may your funds.",
  },
  step4Textp5: {
    id: "tutorial.step.4.text.p5",
    defaultMessage: "Do not enter your seed key to any phising website. Nobody can reverse, cancel or refund transactions if your wallet has been compromised.",
  },
  step4Textp6: {
    id: "tutorial.step.4.text.p6",
    defaultMessage: "When something doesn’t seem right or you don’t understand it  ask questions and do research. Avoid making a decision based on fear.",
  },
});

const TutorialPage = ({ intl, tutorialStep, onNextTutorialStep, onGoToStep, finishTutorial }) => {
  return (
    <div className="tutorial">
      <div className={"tutorial-side step-" + tutorialStep}>
        <div className={"tutorial-side-image step-" + tutorialStep}>
        </div>
      </div>
      <div className="tutorial-main">
        <div className="tutorial-main-header">
          {{
            0: intl.formatMessage(messages.step0Title),
            1: intl.formatMessage(messages.step1Title),
            2: intl.formatMessage(messages.step2Title),
            3: intl.formatMessage(messages.step3Title),
            4: intl.formatMessage(messages.step4Title),
          }[tutorialStep]}
        </div>
        <div className="tutorial-main-text">
          {{
            0:
              <Aux>
                <div className="column">
                  <p><span className="bold">{intl.formatMessage(messages.step0TextBoldp1)} </span>{intl.formatMessage(messages.step0Textp1)}</p>
                  <p>{intl.formatMessage(messages.step0Textp2)}</p>
                </div>
                <div className="column">
                  <p>{intl.formatMessage(messages.step0Textp3)}</p>
                  <p>{intl.formatMessage(messages.step0Textp4)}</p>
                </div>
              </Aux>,
            1:
              <Aux>
                <div className="column">
                  <p><span className="bold">{intl.formatMessage(messages.step1TextBoldp1)} </span>{intl.formatMessage(messages.step1Textp1)}</p>
                  <p>{intl.formatMessage(messages.step1Textp2)}</p>
                </div>
              </Aux>,
            2:
              <Aux>
                <div className="column">
                  <p>{intl.formatMessage(messages.step2Textp1)}<span className="bold">{intl.formatMessage(messages.step2TextBoldp1)} </span>{intl.formatMessage(messages.step2Textp12)}</p>
                  <p>{intl.formatMessage(messages.step0Textp2)}</p>
                  <p>{intl.formatMessage(messages.step2Textp3)}</p>
                </div>
                <div className="column">
                  <p><span className="bold">{intl.formatMessage(messages.step2Textp4)}</span></p>
                </div>
              </Aux>,
            3:
              <Aux>
                <div className="column">
                  <p><span className="bold">{intl.formatMessage(messages.step3Textp1)} </span>{intl.formatMessage(messages.step3TextLightp1)}</p>
                  <p><span className="bold">{intl.formatMessage(messages.step3Textp2)} </span>{intl.formatMessage(messages.step3TextLightp2)}<span className="bold">{intl.formatMessage(messages.step3Textp22)} </span>{intl.formatMessage(messages.step3TextLightp22)}<span className="bold">{intl.formatMessage(messages.step3Textp23)}</span></p>
                </div>
                <div className="column">
                  <p>{intl.formatMessage(messages.step3Textp3)}</p>
                  <p>{intl.formatMessage(messages.step3Textp4)}</p>
                </div>
              </Aux>,
            4:
              <Aux>
                <div className="column">
                  <p><span className="bold">{intl.formatMessage(messages.step4TextBoldp1)} </span></p>
                  <p>{intl.formatMessage(messages.step4Textp2)}</p>
                  <p>{intl.formatMessage(messages.step4Textp3)}</p>
                  <p>{intl.formatMessage(messages.step4Textp4)}</p>
                </div>
                <div className="column">
                  <p>{intl.formatMessage(messages.step4Textp5)}</p>
                  <p><span className="bold">{intl.formatMessage(messages.step4Textp6)}</span></p>
                </div>
              </Aux>
          }[tutorialStep]}
        </div>
        <div className="tutorial-main-toolbar">
          <KeyBlueButton className="next-button" onClick={tutorialStep < 4 ? onNextTutorialStep : finishTutorial} >
            <T id="tutorial.nextBtn" m={"Next"}/>
          </KeyBlueButton>
          <div className="tutorial-main-toolbar-step-indicators">
            <div className={tutorialStep == 0 ? "current" : tutorialStep > 0 ? "checked" : ""} onClick={tutorialStep !== 0 ? ()=>onGoToStep(0) : null}></div>
            <div className={tutorialStep == 1 ? "current" : tutorialStep > 1 ? "checked" : tutorialStep < 1 ? "unchecked" : ""} onClick={tutorialStep !== 1 ? ()=>onGoToStep(1) : null}></div>
            <div className={tutorialStep == 2 ? "current" : tutorialStep > 2 ? "checked" : tutorialStep < 2 ? "unchecked" : ""} onClick={tutorialStep !== 2 ? ()=>onGoToStep(2) : null}></div>
            <div className={tutorialStep == 3 ? "current" : tutorialStep > 3 ? "checked" : tutorialStep < 3 ? "unchecked" : ""} onClick={tutorialStep !== 3 ? ()=>onGoToStep(3) : null}></div>
            <div className={tutorialStep == 4 ? "current" : tutorialStep > 4 ? "checked" : tutorialStep < 4 ? "unchecked" : ""} onClick={tutorialStep !== 4 ? ()=>onGoToStep(4) : null}></div>
          </div>
          {tutorialStep < 4 &&
            <InvisibleButton className="skip-button" onClick={finishTutorial}>
              <T id="tutorial.skipBtn" m={"Skip"}/>
            </InvisibleButton>
          }
        </div>
      </div>
    </div>
  );
};
export default injectIntl(TutorialPage);
