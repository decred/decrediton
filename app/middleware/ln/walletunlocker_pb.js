// source: walletunlocker.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var proto = {};

var lightning_pb = require('./lightning_pb.js');
goog.object.extend(proto, lightning_pb);
goog.exportSymbol('lnrpc.ChangePasswordRequest', null, proto);
goog.exportSymbol('lnrpc.ChangePasswordResponse', null, proto);
goog.exportSymbol('lnrpc.GenSeedRequest', null, proto);
goog.exportSymbol('lnrpc.GenSeedResponse', null, proto);
goog.exportSymbol('lnrpc.InitWalletRequest', null, proto);
goog.exportSymbol('lnrpc.InitWalletResponse', null, proto);
goog.exportSymbol('lnrpc.UnlockWalletRequest', null, proto);
goog.exportSymbol('lnrpc.UnlockWalletResponse', null, proto);
goog.exportSymbol('lnrpc.WatchOnly', null, proto);
goog.exportSymbol('lnrpc.WatchOnlyAccount', null, proto);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.GenSeedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.GenSeedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.GenSeedRequest.displayName = 'proto.lnrpc.GenSeedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.GenSeedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lnrpc.GenSeedResponse.repeatedFields_, null);
};
goog.inherits(proto.lnrpc.GenSeedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.GenSeedResponse.displayName = 'proto.lnrpc.GenSeedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.InitWalletRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lnrpc.InitWalletRequest.repeatedFields_, null);
};
goog.inherits(proto.lnrpc.InitWalletRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.InitWalletRequest.displayName = 'proto.lnrpc.InitWalletRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.InitWalletResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.InitWalletResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.InitWalletResponse.displayName = 'proto.lnrpc.InitWalletResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.WatchOnly = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lnrpc.WatchOnly.repeatedFields_, null);
};
goog.inherits(proto.lnrpc.WatchOnly, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.WatchOnly.displayName = 'proto.lnrpc.WatchOnly';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.WatchOnlyAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.WatchOnlyAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.WatchOnlyAccount.displayName = 'proto.lnrpc.WatchOnlyAccount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.UnlockWalletRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.lnrpc.UnlockWalletRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.UnlockWalletRequest.displayName = 'proto.lnrpc.UnlockWalletRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.UnlockWalletResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.lnrpc.UnlockWalletResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.UnlockWalletResponse.displayName = 'proto.lnrpc.UnlockWalletResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.ChangePasswordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.ChangePasswordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.ChangePasswordRequest.displayName = 'proto.lnrpc.ChangePasswordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lnrpc.ChangePasswordResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lnrpc.ChangePasswordResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lnrpc.ChangePasswordResponse.displayName = 'proto.lnrpc.ChangePasswordResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.GenSeedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.GenSeedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.GenSeedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.GenSeedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    aezeedPassphrase: msg.getAezeedPassphrase_asB64(),
    seedEntropy: msg.getSeedEntropy_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.GenSeedRequest}
 */
proto.lnrpc.GenSeedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.GenSeedRequest;
  return proto.lnrpc.GenSeedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.GenSeedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.GenSeedRequest}
 */
proto.lnrpc.GenSeedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAezeedPassphrase(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSeedEntropy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.GenSeedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.GenSeedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.GenSeedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.GenSeedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAezeedPassphrase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSeedEntropy_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes aezeed_passphrase = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.GenSeedRequest.prototype.getAezeedPassphrase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes aezeed_passphrase = 1;
 * This is a type-conversion wrapper around `getAezeedPassphrase()`
 * @return {string}
 */
proto.lnrpc.GenSeedRequest.prototype.getAezeedPassphrase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAezeedPassphrase()));
};


/**
 * optional bytes aezeed_passphrase = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAezeedPassphrase()`
 * @return {!Uint8Array}
 */
proto.lnrpc.GenSeedRequest.prototype.getAezeedPassphrase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAezeedPassphrase()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.GenSeedRequest} returns this
 */
proto.lnrpc.GenSeedRequest.prototype.setAezeedPassphrase = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes seed_entropy = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.GenSeedRequest.prototype.getSeedEntropy = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes seed_entropy = 2;
 * This is a type-conversion wrapper around `getSeedEntropy()`
 * @return {string}
 */
proto.lnrpc.GenSeedRequest.prototype.getSeedEntropy_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSeedEntropy()));
};


/**
 * optional bytes seed_entropy = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSeedEntropy()`
 * @return {!Uint8Array}
 */
proto.lnrpc.GenSeedRequest.prototype.getSeedEntropy_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSeedEntropy()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.GenSeedRequest} returns this
 */
proto.lnrpc.GenSeedRequest.prototype.setSeedEntropy = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lnrpc.GenSeedResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.GenSeedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.GenSeedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.GenSeedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.GenSeedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cipherSeedMnemonicList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    encipheredSeed: msg.getEncipheredSeed_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.GenSeedResponse}
 */
proto.lnrpc.GenSeedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.GenSeedResponse;
  return proto.lnrpc.GenSeedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.GenSeedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.GenSeedResponse}
 */
proto.lnrpc.GenSeedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCipherSeedMnemonic(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncipheredSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.GenSeedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.GenSeedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.GenSeedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.GenSeedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCipherSeedMnemonicList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getEncipheredSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * repeated string cipher_seed_mnemonic = 1;
 * @return {!Array<string>}
 */
proto.lnrpc.GenSeedResponse.prototype.getCipherSeedMnemonicList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.lnrpc.GenSeedResponse} returns this
 */
proto.lnrpc.GenSeedResponse.prototype.setCipherSeedMnemonicList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.lnrpc.GenSeedResponse} returns this
 */
proto.lnrpc.GenSeedResponse.prototype.addCipherSeedMnemonic = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lnrpc.GenSeedResponse} returns this
 */
proto.lnrpc.GenSeedResponse.prototype.clearCipherSeedMnemonicList = function() {
  return this.setCipherSeedMnemonicList([]);
};


/**
 * optional bytes enciphered_seed = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.GenSeedResponse.prototype.getEncipheredSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes enciphered_seed = 2;
 * This is a type-conversion wrapper around `getEncipheredSeed()`
 * @return {string}
 */
proto.lnrpc.GenSeedResponse.prototype.getEncipheredSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncipheredSeed()));
};


/**
 * optional bytes enciphered_seed = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncipheredSeed()`
 * @return {!Uint8Array}
 */
proto.lnrpc.GenSeedResponse.prototype.getEncipheredSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncipheredSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.GenSeedResponse} returns this
 */
proto.lnrpc.GenSeedResponse.prototype.setEncipheredSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lnrpc.InitWalletRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.InitWalletRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.InitWalletRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.InitWalletRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.InitWalletRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletPassword: msg.getWalletPassword_asB64(),
    cipherSeedMnemonicList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    aezeedPassphrase: msg.getAezeedPassphrase_asB64(),
    recoveryWindow: jspb.Message.getFieldWithDefault(msg, 4, 0),
    channelBackups: (f = msg.getChannelBackups()) && lightning_pb.ChanBackupSnapshot.toObject(includeInstance, f),
    statelessInit: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    extendedMasterKey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    extendedMasterKeyBirthdayTimestamp: jspb.Message.getFieldWithDefault(msg, 8, 0),
    watchOnly: (f = msg.getWatchOnly()) && proto.lnrpc.WatchOnly.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.InitWalletRequest}
 */
proto.lnrpc.InitWalletRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.InitWalletRequest;
  return proto.lnrpc.InitWalletRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.InitWalletRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.InitWalletRequest}
 */
proto.lnrpc.InitWalletRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWalletPassword(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addCipherSeedMnemonic(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAezeedPassphrase(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecoveryWindow(value);
      break;
    case 5:
      var value = new lightning_pb.ChanBackupSnapshot;
      reader.readMessage(value,lightning_pb.ChanBackupSnapshot.deserializeBinaryFromReader);
      msg.setChannelBackups(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatelessInit(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtendedMasterKey(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setExtendedMasterKeyBirthdayTimestamp(value);
      break;
    case 9:
      var value = new proto.lnrpc.WatchOnly;
      reader.readMessage(value,proto.lnrpc.WatchOnly.deserializeBinaryFromReader);
      msg.setWatchOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.InitWalletRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.InitWalletRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.InitWalletRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.InitWalletRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletPassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCipherSeedMnemonicList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAezeedPassphrase_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRecoveryWindow();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getChannelBackups();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      lightning_pb.ChanBackupSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getStatelessInit();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getExtendedMasterKey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getExtendedMasterKeyBirthdayTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getWatchOnly();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.lnrpc.WatchOnly.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes wallet_password = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.InitWalletRequest.prototype.getWalletPassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes wallet_password = 1;
 * This is a type-conversion wrapper around `getWalletPassword()`
 * @return {string}
 */
proto.lnrpc.InitWalletRequest.prototype.getWalletPassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWalletPassword()));
};


/**
 * optional bytes wallet_password = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWalletPassword()`
 * @return {!Uint8Array}
 */
proto.lnrpc.InitWalletRequest.prototype.getWalletPassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWalletPassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.setWalletPassword = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated string cipher_seed_mnemonic = 2;
 * @return {!Array<string>}
 */
proto.lnrpc.InitWalletRequest.prototype.getCipherSeedMnemonicList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.setCipherSeedMnemonicList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.addCipherSeedMnemonic = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.clearCipherSeedMnemonicList = function() {
  return this.setCipherSeedMnemonicList([]);
};


/**
 * optional bytes aezeed_passphrase = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.InitWalletRequest.prototype.getAezeedPassphrase = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes aezeed_passphrase = 3;
 * This is a type-conversion wrapper around `getAezeedPassphrase()`
 * @return {string}
 */
proto.lnrpc.InitWalletRequest.prototype.getAezeedPassphrase_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAezeedPassphrase()));
};


/**
 * optional bytes aezeed_passphrase = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAezeedPassphrase()`
 * @return {!Uint8Array}
 */
proto.lnrpc.InitWalletRequest.prototype.getAezeedPassphrase_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAezeedPassphrase()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.setAezeedPassphrase = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int32 recovery_window = 4;
 * @return {number}
 */
proto.lnrpc.InitWalletRequest.prototype.getRecoveryWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.setRecoveryWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ChanBackupSnapshot channel_backups = 5;
 * @return {?proto.lnrpc.ChanBackupSnapshot}
 */
proto.lnrpc.InitWalletRequest.prototype.getChannelBackups = function() {
  return /** @type{?proto.lnrpc.ChanBackupSnapshot} */ (
    jspb.Message.getWrapperField(this, lightning_pb.ChanBackupSnapshot, 5));
};


/**
 * @param {?proto.lnrpc.ChanBackupSnapshot|undefined} value
 * @return {!proto.lnrpc.InitWalletRequest} returns this
*/
proto.lnrpc.InitWalletRequest.prototype.setChannelBackups = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.clearChannelBackups = function() {
  return this.setChannelBackups(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lnrpc.InitWalletRequest.prototype.hasChannelBackups = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool stateless_init = 6;
 * @return {boolean}
 */
proto.lnrpc.InitWalletRequest.prototype.getStatelessInit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.setStatelessInit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string extended_master_key = 7;
 * @return {string}
 */
proto.lnrpc.InitWalletRequest.prototype.getExtendedMasterKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.setExtendedMasterKey = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 extended_master_key_birthday_timestamp = 8;
 * @return {number}
 */
proto.lnrpc.InitWalletRequest.prototype.getExtendedMasterKeyBirthdayTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.setExtendedMasterKeyBirthdayTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional WatchOnly watch_only = 9;
 * @return {?proto.lnrpc.WatchOnly}
 */
proto.lnrpc.InitWalletRequest.prototype.getWatchOnly = function() {
  return /** @type{?proto.lnrpc.WatchOnly} */ (
    jspb.Message.getWrapperField(this, proto.lnrpc.WatchOnly, 9));
};


/**
 * @param {?proto.lnrpc.WatchOnly|undefined} value
 * @return {!proto.lnrpc.InitWalletRequest} returns this
*/
proto.lnrpc.InitWalletRequest.prototype.setWatchOnly = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lnrpc.InitWalletRequest} returns this
 */
proto.lnrpc.InitWalletRequest.prototype.clearWatchOnly = function() {
  return this.setWatchOnly(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lnrpc.InitWalletRequest.prototype.hasWatchOnly = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.InitWalletResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.InitWalletResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.InitWalletResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.InitWalletResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    adminMacaroon: msg.getAdminMacaroon_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.InitWalletResponse}
 */
proto.lnrpc.InitWalletResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.InitWalletResponse;
  return proto.lnrpc.InitWalletResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.InitWalletResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.InitWalletResponse}
 */
proto.lnrpc.InitWalletResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAdminMacaroon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.InitWalletResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.InitWalletResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.InitWalletResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.InitWalletResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdminMacaroon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes admin_macaroon = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.InitWalletResponse.prototype.getAdminMacaroon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes admin_macaroon = 1;
 * This is a type-conversion wrapper around `getAdminMacaroon()`
 * @return {string}
 */
proto.lnrpc.InitWalletResponse.prototype.getAdminMacaroon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAdminMacaroon()));
};


/**
 * optional bytes admin_macaroon = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAdminMacaroon()`
 * @return {!Uint8Array}
 */
proto.lnrpc.InitWalletResponse.prototype.getAdminMacaroon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAdminMacaroon()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.InitWalletResponse} returns this
 */
proto.lnrpc.InitWalletResponse.prototype.setAdminMacaroon = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lnrpc.WatchOnly.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.WatchOnly.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.WatchOnly.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.WatchOnly} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.WatchOnly.toObject = function(includeInstance, msg) {
  var f, obj = {
    masterKeyBirthdayTimestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    masterKeyFingerprint: msg.getMasterKeyFingerprint_asB64(),
    accountsList: jspb.Message.toObjectList(msg.getAccountsList(),
    proto.lnrpc.WatchOnlyAccount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.WatchOnly}
 */
proto.lnrpc.WatchOnly.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.WatchOnly;
  return proto.lnrpc.WatchOnly.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.WatchOnly} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.WatchOnly}
 */
proto.lnrpc.WatchOnly.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMasterKeyBirthdayTimestamp(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMasterKeyFingerprint(value);
      break;
    case 3:
      var value = new proto.lnrpc.WatchOnlyAccount;
      reader.readMessage(value,proto.lnrpc.WatchOnlyAccount.deserializeBinaryFromReader);
      msg.addAccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.WatchOnly.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.WatchOnly.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.WatchOnly} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.WatchOnly.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMasterKeyBirthdayTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMasterKeyFingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.lnrpc.WatchOnlyAccount.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 master_key_birthday_timestamp = 1;
 * @return {number}
 */
proto.lnrpc.WatchOnly.prototype.getMasterKeyBirthdayTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.WatchOnly} returns this
 */
proto.lnrpc.WatchOnly.prototype.setMasterKeyBirthdayTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes master_key_fingerprint = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.WatchOnly.prototype.getMasterKeyFingerprint = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes master_key_fingerprint = 2;
 * This is a type-conversion wrapper around `getMasterKeyFingerprint()`
 * @return {string}
 */
proto.lnrpc.WatchOnly.prototype.getMasterKeyFingerprint_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMasterKeyFingerprint()));
};


/**
 * optional bytes master_key_fingerprint = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMasterKeyFingerprint()`
 * @return {!Uint8Array}
 */
proto.lnrpc.WatchOnly.prototype.getMasterKeyFingerprint_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMasterKeyFingerprint()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.WatchOnly} returns this
 */
proto.lnrpc.WatchOnly.prototype.setMasterKeyFingerprint = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated WatchOnlyAccount accounts = 3;
 * @return {!Array<!proto.lnrpc.WatchOnlyAccount>}
 */
proto.lnrpc.WatchOnly.prototype.getAccountsList = function() {
  return /** @type{!Array<!proto.lnrpc.WatchOnlyAccount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lnrpc.WatchOnlyAccount, 3));
};


/**
 * @param {!Array<!proto.lnrpc.WatchOnlyAccount>} value
 * @return {!proto.lnrpc.WatchOnly} returns this
*/
proto.lnrpc.WatchOnly.prototype.setAccountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.lnrpc.WatchOnlyAccount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lnrpc.WatchOnlyAccount}
 */
proto.lnrpc.WatchOnly.prototype.addAccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.lnrpc.WatchOnlyAccount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lnrpc.WatchOnly} returns this
 */
proto.lnrpc.WatchOnly.prototype.clearAccountsList = function() {
  return this.setAccountsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.WatchOnlyAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.WatchOnlyAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.WatchOnlyAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.WatchOnlyAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    purpose: jspb.Message.getFieldWithDefault(msg, 1, 0),
    coinType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    account: jspb.Message.getFieldWithDefault(msg, 3, 0),
    xpub: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.WatchOnlyAccount}
 */
proto.lnrpc.WatchOnlyAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.WatchOnlyAccount;
  return proto.lnrpc.WatchOnlyAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.WatchOnlyAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.WatchOnlyAccount}
 */
proto.lnrpc.WatchOnlyAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPurpose(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCoinType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAccount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setXpub(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.WatchOnlyAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.WatchOnlyAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.WatchOnlyAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.WatchOnlyAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPurpose();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCoinType();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAccount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getXpub();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 purpose = 1;
 * @return {number}
 */
proto.lnrpc.WatchOnlyAccount.prototype.getPurpose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.WatchOnlyAccount} returns this
 */
proto.lnrpc.WatchOnlyAccount.prototype.setPurpose = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 coin_type = 2;
 * @return {number}
 */
proto.lnrpc.WatchOnlyAccount.prototype.getCoinType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.WatchOnlyAccount} returns this
 */
proto.lnrpc.WatchOnlyAccount.prototype.setCoinType = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 account = 3;
 * @return {number}
 */
proto.lnrpc.WatchOnlyAccount.prototype.getAccount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.WatchOnlyAccount} returns this
 */
proto.lnrpc.WatchOnlyAccount.prototype.setAccount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string xpub = 4;
 * @return {string}
 */
proto.lnrpc.WatchOnlyAccount.prototype.getXpub = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.lnrpc.WatchOnlyAccount} returns this
 */
proto.lnrpc.WatchOnlyAccount.prototype.setXpub = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.UnlockWalletRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.UnlockWalletRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.UnlockWalletRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.UnlockWalletRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    walletPassword: msg.getWalletPassword_asB64(),
    recoveryWindow: jspb.Message.getFieldWithDefault(msg, 2, 0),
    channelBackups: (f = msg.getChannelBackups()) && lightning_pb.ChanBackupSnapshot.toObject(includeInstance, f),
    dcrwClientKeyCert: msg.getDcrwClientKeyCert_asB64(),
    statelessInit: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.UnlockWalletRequest}
 */
proto.lnrpc.UnlockWalletRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.UnlockWalletRequest;
  return proto.lnrpc.UnlockWalletRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.UnlockWalletRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.UnlockWalletRequest}
 */
proto.lnrpc.UnlockWalletRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setWalletPassword(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecoveryWindow(value);
      break;
    case 3:
      var value = new lightning_pb.ChanBackupSnapshot;
      reader.readMessage(value,lightning_pb.ChanBackupSnapshot.deserializeBinaryFromReader);
      msg.setChannelBackups(value);
      break;
    case 901:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDcrwClientKeyCert(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatelessInit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.UnlockWalletRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.UnlockWalletRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.UnlockWalletRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.UnlockWalletRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWalletPassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRecoveryWindow();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getChannelBackups();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lightning_pb.ChanBackupSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getDcrwClientKeyCert_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      901,
      f
    );
  }
  f = message.getStatelessInit();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes wallet_password = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.UnlockWalletRequest.prototype.getWalletPassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes wallet_password = 1;
 * This is a type-conversion wrapper around `getWalletPassword()`
 * @return {string}
 */
proto.lnrpc.UnlockWalletRequest.prototype.getWalletPassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getWalletPassword()));
};


/**
 * optional bytes wallet_password = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getWalletPassword()`
 * @return {!Uint8Array}
 */
proto.lnrpc.UnlockWalletRequest.prototype.getWalletPassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getWalletPassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.UnlockWalletRequest} returns this
 */
proto.lnrpc.UnlockWalletRequest.prototype.setWalletPassword = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 recovery_window = 2;
 * @return {number}
 */
proto.lnrpc.UnlockWalletRequest.prototype.getRecoveryWindow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lnrpc.UnlockWalletRequest} returns this
 */
proto.lnrpc.UnlockWalletRequest.prototype.setRecoveryWindow = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ChanBackupSnapshot channel_backups = 3;
 * @return {?proto.lnrpc.ChanBackupSnapshot}
 */
proto.lnrpc.UnlockWalletRequest.prototype.getChannelBackups = function() {
  return /** @type{?proto.lnrpc.ChanBackupSnapshot} */ (
    jspb.Message.getWrapperField(this, lightning_pb.ChanBackupSnapshot, 3));
};


/**
 * @param {?proto.lnrpc.ChanBackupSnapshot|undefined} value
 * @return {!proto.lnrpc.UnlockWalletRequest} returns this
*/
proto.lnrpc.UnlockWalletRequest.prototype.setChannelBackups = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lnrpc.UnlockWalletRequest} returns this
 */
proto.lnrpc.UnlockWalletRequest.prototype.clearChannelBackups = function() {
  return this.setChannelBackups(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lnrpc.UnlockWalletRequest.prototype.hasChannelBackups = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes dcrw_client_key_cert = 901;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.UnlockWalletRequest.prototype.getDcrwClientKeyCert = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 901, ""));
};


/**
 * optional bytes dcrw_client_key_cert = 901;
 * This is a type-conversion wrapper around `getDcrwClientKeyCert()`
 * @return {string}
 */
proto.lnrpc.UnlockWalletRequest.prototype.getDcrwClientKeyCert_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDcrwClientKeyCert()));
};


/**
 * optional bytes dcrw_client_key_cert = 901;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDcrwClientKeyCert()`
 * @return {!Uint8Array}
 */
proto.lnrpc.UnlockWalletRequest.prototype.getDcrwClientKeyCert_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDcrwClientKeyCert()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.UnlockWalletRequest} returns this
 */
proto.lnrpc.UnlockWalletRequest.prototype.setDcrwClientKeyCert = function(value) {
  return jspb.Message.setProto3BytesField(this, 901, value);
};


/**
 * optional bool stateless_init = 4;
 * @return {boolean}
 */
proto.lnrpc.UnlockWalletRequest.prototype.getStatelessInit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.UnlockWalletRequest} returns this
 */
proto.lnrpc.UnlockWalletRequest.prototype.setStatelessInit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.UnlockWalletResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.UnlockWalletResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.UnlockWalletResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.UnlockWalletResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    adminMacaroon: msg.getAdminMacaroon_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.UnlockWalletResponse}
 */
proto.lnrpc.UnlockWalletResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.UnlockWalletResponse;
  return proto.lnrpc.UnlockWalletResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.UnlockWalletResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.UnlockWalletResponse}
 */
proto.lnrpc.UnlockWalletResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 901:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAdminMacaroon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.UnlockWalletResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.UnlockWalletResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.UnlockWalletResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.UnlockWalletResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdminMacaroon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      901,
      f
    );
  }
};


/**
 * optional bytes admin_macaroon = 901;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.UnlockWalletResponse.prototype.getAdminMacaroon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 901, ""));
};


/**
 * optional bytes admin_macaroon = 901;
 * This is a type-conversion wrapper around `getAdminMacaroon()`
 * @return {string}
 */
proto.lnrpc.UnlockWalletResponse.prototype.getAdminMacaroon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAdminMacaroon()));
};


/**
 * optional bytes admin_macaroon = 901;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAdminMacaroon()`
 * @return {!Uint8Array}
 */
proto.lnrpc.UnlockWalletResponse.prototype.getAdminMacaroon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAdminMacaroon()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.UnlockWalletResponse} returns this
 */
proto.lnrpc.UnlockWalletResponse.prototype.setAdminMacaroon = function(value) {
  return jspb.Message.setProto3BytesField(this, 901, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.ChangePasswordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.ChangePasswordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.ChangePasswordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.ChangePasswordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentPassword: msg.getCurrentPassword_asB64(),
    newPassword: msg.getNewPassword_asB64(),
    statelessInit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    newMacaroonRootKey: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.ChangePasswordRequest}
 */
proto.lnrpc.ChangePasswordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.ChangePasswordRequest;
  return proto.lnrpc.ChangePasswordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.ChangePasswordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.ChangePasswordRequest}
 */
proto.lnrpc.ChangePasswordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCurrentPassword(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNewPassword(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatelessInit(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNewMacaroonRootKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.ChangePasswordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.ChangePasswordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.ChangePasswordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.ChangePasswordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentPassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNewPassword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getStatelessInit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getNewMacaroonRootKey();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional bytes current_password = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.ChangePasswordRequest.prototype.getCurrentPassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes current_password = 1;
 * This is a type-conversion wrapper around `getCurrentPassword()`
 * @return {string}
 */
proto.lnrpc.ChangePasswordRequest.prototype.getCurrentPassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCurrentPassword()));
};


/**
 * optional bytes current_password = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCurrentPassword()`
 * @return {!Uint8Array}
 */
proto.lnrpc.ChangePasswordRequest.prototype.getCurrentPassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCurrentPassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.ChangePasswordRequest} returns this
 */
proto.lnrpc.ChangePasswordRequest.prototype.setCurrentPassword = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes new_password = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.ChangePasswordRequest.prototype.getNewPassword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes new_password = 2;
 * This is a type-conversion wrapper around `getNewPassword()`
 * @return {string}
 */
proto.lnrpc.ChangePasswordRequest.prototype.getNewPassword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNewPassword()));
};


/**
 * optional bytes new_password = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNewPassword()`
 * @return {!Uint8Array}
 */
proto.lnrpc.ChangePasswordRequest.prototype.getNewPassword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNewPassword()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.ChangePasswordRequest} returns this
 */
proto.lnrpc.ChangePasswordRequest.prototype.setNewPassword = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool stateless_init = 3;
 * @return {boolean}
 */
proto.lnrpc.ChangePasswordRequest.prototype.getStatelessInit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.ChangePasswordRequest} returns this
 */
proto.lnrpc.ChangePasswordRequest.prototype.setStatelessInit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool new_macaroon_root_key = 4;
 * @return {boolean}
 */
proto.lnrpc.ChangePasswordRequest.prototype.getNewMacaroonRootKey = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lnrpc.ChangePasswordRequest} returns this
 */
proto.lnrpc.ChangePasswordRequest.prototype.setNewMacaroonRootKey = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lnrpc.ChangePasswordResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lnrpc.ChangePasswordResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lnrpc.ChangePasswordResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.ChangePasswordResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    adminMacaroon: msg.getAdminMacaroon_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lnrpc.ChangePasswordResponse}
 */
proto.lnrpc.ChangePasswordResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lnrpc.ChangePasswordResponse;
  return proto.lnrpc.ChangePasswordResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lnrpc.ChangePasswordResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lnrpc.ChangePasswordResponse}
 */
proto.lnrpc.ChangePasswordResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAdminMacaroon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lnrpc.ChangePasswordResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lnrpc.ChangePasswordResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lnrpc.ChangePasswordResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lnrpc.ChangePasswordResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAdminMacaroon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes admin_macaroon = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lnrpc.ChangePasswordResponse.prototype.getAdminMacaroon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes admin_macaroon = 1;
 * This is a type-conversion wrapper around `getAdminMacaroon()`
 * @return {string}
 */
proto.lnrpc.ChangePasswordResponse.prototype.getAdminMacaroon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAdminMacaroon()));
};


/**
 * optional bytes admin_macaroon = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAdminMacaroon()`
 * @return {!Uint8Array}
 */
proto.lnrpc.ChangePasswordResponse.prototype.getAdminMacaroon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAdminMacaroon()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lnrpc.ChangePasswordResponse} returns this
 */
proto.lnrpc.ChangePasswordResponse.prototype.setAdminMacaroon = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto);
